<?php
/**
 * Core app configuration.
 */
use App\Lib\ConfigClosures;

//----

return [
	/**
	 * Debug Level:
	 *
	 * Disabled in production.
	 */
	'debug' => true,

	/**
	 * Configure basic information about the application.
	 *
	 * - namespace - The namespace to find app classes under.
	 * - encoding - The encoding used for HTML + database connections.
	 * - base - The base directory the app resides in. If false this
	 *   will be auto detected.
	 * - dir - Name of app directory.
	 * - webroot - The webroot directory.
	 * - wwwRoot - The file path to webroot.
	 * - baseUrl - To configure CakePHP to *not* use mod_rewrite and to
	 *   use CakePHP pretty URLs, remove these .htaccess
	 *   files:
	 *      /.htaccess
	 *      /webroot/.htaccess
	 *   And uncomment the baseUrl key below.
	 * - fullBaseUrl - A base URL to use for absolute links.
	 * - imageBaseUrl - Web path to the public images directory under webroot.
	 * - cssBaseUrl - Web path to the public css directory under webroot.
	 * - jsBaseUrl - Web path to the public js directory under webroot.
	 * - paths - Configure paths for non class based resources. Supports the
	 *   `plugins`, `templates`, `locales` subkeys, which allow the definition of
	 *   paths for plugins, view templates and locale files respectively.
	 */
	'App' => [
		'namespace' => 'App',
		'encoding' => 'UTF-8',
		'base' => false,
		'dir' => 'src',
		'webroot' => 'webroot',
		'wwwRoot' => WWW_ROOT,
		// 'baseUrl' => env('SCRIPT_NAME'),
		'fullBaseUrl' => false,
		'imageBaseUrl' => 'img/',
		'cssBaseUrl' => 'css/',
		'jsBaseUrl' => 'js/',
		'paths' => [
			'plugins' => [ROOT . DS . 'plugins' . DS],
			'templates' => [APP . 'Template' . DS],
			'locales' => [APP . 'Locale' . DS],
		],
	],

	/**
	 * Security and encryption configuration
	 *
	 * - salt - A random string used in security hashing methods.
	 *   The salt value is also used as the encryption key.
	 *   You should treat it as extremely sensitive data.
	 */
	'Security' => [
		'salt' => '{{__SALT__}}',
	],

	/**
	 * Apply timestamps with the last modified time to static assets (js, css, images).
	 * Will append a querystring parameter containing the time the file was modified.
	 * This is useful for busting browser caches.
	 *
	 * Set to true to apply timestamps when debug is true. Set to 'force' to always
	 * enable timestamping regardless of debug value.
	 */
	'Asset' => [
		'timestamp' => true,
	],

	/**
	 * Configure the cache adapters.
	 */
	'Cache' => [
		'default' => ConfigClosures::cacheMerge([
			// Returns the default array, merged with the array passed in.
			'prefix' => 'default_',
		]),

		/**
		 * Configure the cache used for general framework caching. Path information,
		 * object listings, and translation cache files are stored with this
		 * configuration.
		 */
		'_cake_core_' => ConfigClosures::cacheMerge([
			'prefix' => 'cake_core_',
		]),

		/**
		 * Configure the cache for model and datasource caches. This cache
		 * configuration is used to store schema descriptions, and table listings
		 * in connections.
		 */
		'_cake_model_' => ConfigClosures::cacheMerge([
			'prefix' => 'cake_model_',
		]),

		/**
		 * Configure the cache for session caching. This cache configuration
		 * is used to store the session information. To update where Sessions
		 * are stored modify this array.
		 */
		'sessions' => ConfigClosures::cacheMerge([
			'prefix' => 'sessions_',
		]),

		/**
		 * An example of a "simple" File config, for reference.
		 *
		 * Caching should be via Memcached by default though.
		 *
		 * The [duration] here is normally set to `+2 minutes` and
		 * then overriden in bootstrap.php to `+1 years` if debug == 0.
		 * With out env-aware configs that's unnecessary.
		 */
		/*
		'sample_file_config' => [
			'className' => 'File',
			'prefix' => 'myapp_cake_core_',
			'path' => CACHE . 'persistent/',
			'serialize' => true,
			'duration' => '+1 years',
		],
		*/
	],

	/**
	 * Configure the Error and Exception handlers used by your application.
	 *
	 * By default errors are displayed using Debugger, when debug is true and logged
	 * by Cake\Log\Log when debug is false.
	 *
	 * In CLI environments exceptions will be printed to stderr with a backtrace.
	 * In web environments an HTML page will be displayed for the exception.
	 * With debug true, framework errors like Missing Controller will be displayed.
	 * When debug is false, framework errors will be coerced into generic HTTP errors.
	 *
	 * Options:
	 *
	 * - `errorLevel` - int - The level of errors you are interested in capturing.
	 * - `trace` - boolean - Whether or not backtraces should be included in
	 *   logged errors/exceptions.
	 * - `log` - boolean - Whether or not you want exceptions logged.
	 * - `exceptionRenderer` - string - The class responsible for rendering
	 *   uncaught exceptions.  If you choose a custom class you should place
	 *   the file for that class in src/Error. This class needs to implement a
	 *   render method.
	 * - `skipLog` - array - List of exceptions to skip for logging. Exceptions that
	 *   extend one of the listed exceptions will also be skipped for logging.
	 *   E.g.:
	 *   `'skipLog' => ['Cake\Network\Exception\NotFoundException', 'Cake\Network\Exception\UnauthorizedException']`
	 */
	'Error' => [
		'errorLevel' => E_ALL & ~E_DEPRECATED,
		'exceptionRenderer' => 'Cake\Error\ExceptionRenderer',
		'skipLog' => [],
		'log' => true,
		'trace' => true,
	],

	/**
	 * Email configuration.
	 *
	 * Production email delivery should typically be handed off to a local
	 * subsystem like postfix in order to make the Cake app asnychronous.
	 * That system can in turn be configured to relay all outbound email
	 * through a service like Amazon SES but that should be done at the
	 * system level and not in PHP directly.
	 */
	'EmailTransport' => [
		'default' => [
			'className' => 'Mail',
		],
	],

	'Email' => [
		'default' => [
			'transport' => 'default',
			'from' => 'production@loadsys.com',
			//'charset' => 'utf-8',
			//'headerCharset' => 'utf-8',
			'emailFormat' => 'html',
		],
	],

	/**
	 * Connection information used by the ORM to connect
	 * to your application's datastores.
	 *
	 * Production servers should connect to an external DB service,
	 * like Amazon RDS.
	 */
	'Datasources' => [
		'default' => [
			'className' => 'Cake\Database\Connection',
			'driver' => 'Cake\Database\Driver\Mysql',
			'persistent' => false,
			'host' => 'localhost',
			/**
			 * CakePHP will use the default DB port based on the driver selected
			 * MySQL on MAMP uses port 8889, MAMP users will want to uncomment
			 * the following line and set the port accordingly
			 */
			//'port' => 'nonstandard_port_number',
			'username' => 'my_app',
			'password' => 'secret',
			'database' => 'my_app',
			'encoding' => 'utf8',
			'timezone' => 'UTC',
			'cacheMetadata' => true,

			/**
			 * Set identifier quoting to true if you are using reserved words or
			 * special characters in your table or column names. Enabling this
			 * setting will result in queries built using the Query Builder having
			 * identifiers quoted when creating SQL. It should be noted that this
			 * decreases performance because each query needs to be traversed and
			 * manipulated before being executed.
			 */
			'quoteIdentifiers' => false,

			/**
			 * During development, if using MySQL < 5.6, uncommenting the
			 * following line could boost the speed at which schema metadata is
			 * fetched from the database. It can also be set directly with the
			 * mysql configuration directive 'innodb_stats_on_metadata = 0'
			 * which is the recommended value in production environments
			 */
			//'init' => ['SET GLOBAL innodb_stats_on_metadata = 0'],
		],

		/**
		 * The test connection is used during the test suite. (Not used in
		 * production, but provides defaults for all other envs.)
		 */
		'test' => [
			'className' => 'Cake\Database\Connection',
			'driver' => 'Cake\Database\Driver\Mysql',
			'persistent' => false,
			/*
			'host' => 'localhost',
			'port' => 3306,
			'username' => 'my_app',
			'password' => 'secret',
			'database' => 'test_myapp',
			*/
			'encoding' => 'utf8',
			'timezone' => 'UTC',
			'cacheMetadata' => true,
			'quoteIdentifiers' => false,
			//'init' => ['SET GLOBAL innodb_stats_on_metadata = 0'],
		],
	],

	/**
	 * Configures logging options.
	 *
	 * Note: The skeleton is configured to rotate logs in staging and
	 * production instances at the system level using logrotated. It is
	 * recommended NOT to enable Cake-based log rotation here.
	 */
	'Log' => [
		'debug' => [
			'className' => 'Cake\Log\Engine\FileLog',
			'path' => LOGS,
			'file' => 'debug',
			'levels' => ['notice', 'info', 'debug'],
		],
		'error' => [
			'className' => 'Cake\Log\Engine\FileLog',
			'path' => LOGS,
			'file' => 'error',
			'levels' => ['warning', 'error', 'critical', 'alert', 'emergency'],
		],
		'transactions' => [
			'className' => 'Cake\Log\Engine\FileLog',
			'path' => LOGS,
			'file' => 'transactions',
			'levels' => [],
			'scopes' => ['transactions'],
		],
		'security' => [
			'className' => 'Cake\Log\Engine\FileLog',
			'path' => LOGS,
			'file' => 'security',
			'levels' => [],
			'scopes' => ['security'],
		],
		'performance' => [
			'className' => 'Cake\Log\Engine\FileLog',
			'path' => LOGS,
			'file' => 'performance',
			'levels' => [],
			'scopes' => ['performance'],
		],
	],

	/**
	 * Session configuration.
	 *
	 * The dfault Session configuration uses the Caching Engine
	 * (Memchached) with the `sessions` Cache config.
	 */
	'Session' => [
		'defaults' => 'cache',
		'timeout' => 120,
		'cookie' => '{{APP_COOKIE:CakeApp}}',
		'handler' => [
			'config' => 'sessions',
		],
	],

	/**
	 * Application-specific configurations.
	 */

	/**
	 * Default Site Configuration
	 *
	 * Any time you'd be tempted to type one of these strings directly into
	 * a file, call this Configure var instead.
	 */
	'Defaults' => [
		/**
		 * When enabled, all generated URLs will use https and any non-ssl
		 * requests will be redirected to their ssl counterpart.
		 *
		 * @see \App\Controller\AppController::ssl()
		 * @see config/bootstrap.php
		 */
		'ssl_force' => true,

		'short_name' => '{{APP_DISPLAY_SHORT_NAME:@TODO Set app short name.}}',
		'long_name' => '{{PROJECT_TITLE}}',
		'domain' => '{{APP_DOMAIN_ONLY:acme.com}}',
		'meta_description' => '{{APP_META_DESCRIPTION:@TODO Set default meta description.}}',
		'meta_keywords' => '{{APP_META_KEYWORDS:@TODO:Set default meta keywords.}}',
		'Env' => [
			'Token' => 'prod',
			'Hint' => [
				'Format' => '
	<style>
		nav.top-bar,
		.top-bar-section li:not(.has-form) a:not(.button) {
			%1$s
		}
	</style>
				',
				'Snippet' => '',
				'AuxContent' => '',
			],
		],
	],

	/**
	 * Define a number of static lookup [slug => Display Value] lists.
	 *
	 * These should be kept small since they will be loaded into memory
	 * with every request.
	 *
	 * Top-level keys should match the Entity/Table, second-level keys
	 * should match `*_slug` field names.
	 */
	'Lists' => [],
];
